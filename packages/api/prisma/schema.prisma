generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PaymentStatus {
  pending
  approved
  authorized
  in_process
  in_mediation
  rejected
  cancelled
  refunded
  charged_back
}

enum OrderStatus {
  pending
  approved
  processing
  sending
  delivered
  canceled
}

// Address

model Address {
  id         String    @id @default(uuid())
  street     String
  number     String
  district   String
  city       String
  uf         String
  cep        String
  country    String
  complement String?
  profile    Profile[]
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  order      Order[]

  @@map("addresses")
}

// Profile

model Profile {
  id           String   @id @default(uuid())
  avatar       String?
  completeName String
  cpf          String
  phone        String
  birthDate    String
  addressId    String?
  address      Address? @relation(fields: [addressId], references: [id])
  user         User[]
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("profiles")
}

// User

model User {
  id                 String   @id @default(uuid())
  username           String   @unique
  email              String   @unique
  password           String
  passwordResetToken String?
  isAdmin            Boolean  @default(false)
  profileId          String?
  profile            Profile? @relation(fields: [profileId], references: [id])
  cart               Cart[]
  order              Order[]
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

// Category

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("categories")
}

// Product

model Product {
  id             String           @id @default(uuid())
  title          String
  description    String
  sizes          String[]
  colors         String[]
  price          Float
  stock          Float
  categories     String[]
  images         String[]
  orderId        String?
  orderedProduct OrderedProduct[]
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("products")
}

// Cart

model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  products  String[]
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("carts")
}

// OrderedProduct

model OrderedProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Float
  sizes     String[]
  colors    String[]
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("ordered_products")
}

// Order

model Order {
  id                 String           @id @default(uuid())
  user               User             @relation(fields: [userId], references: [id])
  userId             String
  orderedProducts    OrderedProduct[]
  orderedProductsIds String[]
  amount             Float
  address            Address          @relation(fields: [addressId], references: [id])
  addressId          String
  status             OrderStatus
  mpPaymentId        String
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt          DateTime         @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("orders")
}

model SystemConfiguration {
  id               String   @id @default(uuid())
  sliderImages     String[] @default([])
  announcement     String?
  showAnnouncement Boolean  @default(false)

  @@map("system_configurations")
}
